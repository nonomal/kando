//////////////////////////////////////////////////////////////////////////////////////////
//   _  _ ____ _  _ ___  ____                                                           //
//   |_/  |__| |\ | |  \ |  |    This file belongs to Kando, the cross-platform         //
//   | \_ |  | | \| |__/ |__|    pie menu. Read more on github.com/kando-menu/kando     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: Simon Schneegans <code@simonschneegans.de>
// SPDX-License-Identifier: MIT

// The menu editor consists of several components:
// * The background is drawn behind all other editor components but in front of the
//   actual pie menu. It basically hides the pie menu while editing.
// * The sidebar is shown alongside the pie menu and can be shown or hidden
//   independently from the main editor. However, it is actually part of the editor
//   and is drawn inside the #kando-editor.
// * The other editor components such as the editor-toolbar at the bottom of the screen
//   or the menu configuration widgets in the screen's center. They are visible when
//   the editor is in 'edit-mode'.

// The menu editor of Kando uses Bootstrap 5.
// We use Bootstrap RFS to scale various things based on the window size. We set the base
// value to a small number to make sure that RFS is also applied to small things like
// padding and margin.
$rfs-base-value: 0.1rem;
$rfs-breakpoint: 1400px;

@import '../../../node_modules/bootstrap/scss/bootstrap';

@import './common/style';
@import './background/style';
@import './sidebar/style';
@import './toolbar/style';
@import './preview/style';
@import './properties/style';

// The widgets used to configure the icon-themes are currently located in the icon-themes
// directory. They are only used in the editor and not by the menu itself.
@import '../icon-themes/icon-pickers/style/icon-list-picker.scss';
@import '../icon-themes/icon-pickers/style/base64-picker.scss';

// Handle pointer events -----------------------------------------------------------------

// As the editor UI elements are always drawn on top of the actual pie menu, we have to
// make sure that they do not intercept pointer events if the editor is not in edit-mode.
// The sidebar and the show-toolbar button make sure to receive pointer events themselves.

#kando-editor {
  pointer-events: none;

  &.edit-mode {
    pointer-events: all;
  }
}

// Basic UI styling ----------------------------------------------------------------------
body {
  --bs-body-line-height: 1.3;
}

#kando-editor {
  color: #{$kando-text-color};

  --bs-heading-color: #{$kando-text-color};
  --bs-code-color: #{$kando-highlight-color};
  --bs-border-radius: 0.6rem;
  --bs-border-width: 0;
  --bs-body-bg: rgba(0, 0, 0, 0.6);
  --bs-body-color: #{$kando-text-color};
  --bs-secondary-color: rgba(255, 255, 255, 0.3);
  --bs-emphasis-color: rgba(255, 255, 255);
  --bs-link-color-rgb: #{$kando-highlight-color-red}, #{$kando-highlight-color-green},
    #{$kando-highlight-color-blue};
  --bs-link-hover-color-rgb: white;

  .row {
    --bs-gutter-x: 0.5rem;
  }

  // Make buttons respond to clicks by moving down a bit.
  .btn {
    white-space: nowrap;
    box-shadow: none;

    &.disabled {
      background: repeating-linear-gradient(
        -45deg,
        #363636,
        #363636 10px,
        #3f3e3b 10px,
        #3f3e3b 20px
      );
    }

    &:active {
      transform: translateY(1px);
    }
  }

  .btn-primary,
  .btn-secondary,
  .btn-shine {
    --bs-btn-bg: rgba(255, 255, 255, 0.1);
    --bs-btn-hover-bg: rgba(255, 255, 255, 0.15);
    --bs-btn-active-bg: rgba(255, 255, 255, 0.2);
    --bs-btn-border-color: transparent;
    --bs-btn-hover-border-color: transparent;
    --bs-btn-active-border-color: transparent;
  }

  .btn-dark {
    --bs-btn-bg: rgba(0, 0, 0, 0.8);
    --bs-btn-hover-bg: rgba(30, 30, 30, 0.8);
  }

  .btn-shine {
    transition: background-color 0.15s ease;
    position: relative;
    overflow: hidden;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        120deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
      );

      animation: btn-shine 1s ease-in-out infinite;
    }

    &:hover {
      background-color: rgba(255, 255, 255, 0.3);
    }
  }

  @keyframes btn-shine {
    0% {
      left: -100%;
      transition-property: left;
    }
    100% {
      left: 100%;
      transition-property: left;
    }
  }

  // Labels are usually clickable.
  label {
    cursor: pointer;

    &:active {
      transform: translateY(1px);
    }
  }

  // Make form controls transparent.
  .form-control {
    --bs-body-bg: rgba(255, 255, 255, 0.1);
  }

  input.form-control {
    transition: outline 150ms ease;
    outline: 2px dashed transparent;
  }

  input.form-control:focus {
    outline: 2px dashed white;
  }

  // Make input groups not 100% wide and tall.
  .input-group {
    width: auto;
    align-content: center;
  }

  // Make checkboxes round and transparent,
  .form-check-input {
    background-color: rgba(255, 255, 255, 0.1);
    box-shadow: none !important;
    cursor: pointer;
    @include rfs(3.5rem, font-size);

    &:hover {
      background-color: rgba(255, 255, 255, 0.15);
    }

    &:active {
      transform: translateY(1px);
    }

    &:checked {
      background-color: rgba(255, 255, 255, 0.1);
    }

    &[type='checkbox'] {
      border-radius: 50%;
    }
  }

  // We add the possibility to change the label of checkboxes based on their state.
  div:has(+ .form-check-input:checked) .if-not-checked,
  div:has(+ .form-check-input) .only-if-checked {
    display: none;
  }

  div:has(+ .form-check-input:checked) .only-if-checked {
    display: block;
  }

  // Hide arrows in number inputs.
  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  // Give dropdowns a dark background.
  option {
    background-color: rgba(0, 0, 0, 0.8);
  }

  .form-select {
    --bs-form-select-bg-img: url('data:image/svg+xml,%3csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 16 16%27%3e%3cpath fill=%27none%27 stroke=%27%23fffa40%27 stroke-linecap=%27round%27 stroke-linejoin=%27round%27 stroke-width=%272%27 d=%27m2 5 6 6 6-6%27/%3e%3c/svg%3e');
  }

  // We make the tooltip background a bit darker.
  .tooltip {
    --bs-tooltip-bg: rgba(220, 220, 220, 0.99);
  }

  // These are shown in various places in the editor.
  .swirl1,
  .swirl2 {
    display: inline-block;
    background-size: contain;
    background-repeat: no-repeat;
    aspect-ratio: 200/16;

    &.vertical {
      aspect-ratio: 16/200;
    }
  }

  .swirl1 {
    background-image: url(../../assets/images/swirl1.svg);

    &.vertical {
      background-image: url(../../assets/images/swirl1-vertical.svg);
    }
  }

  .swirl2 {
    background-image: url(../../assets/images/swirl2.svg);
  }
}
